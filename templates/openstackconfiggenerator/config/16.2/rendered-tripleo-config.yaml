{{- /* golang template - https://pkg.go.dev/text/template */ -}}
# Resource Registry
resource_registry:
  OS::TripleO::Services::Docker: OS::Heat::None
  OS::TripleO::Services::Podman: deployment/podman/podman-baremetal-ansible.yaml
  OS::TripleO::DeployedServer::ControlPlanePort: deployed-server/deployed-neutron-port.yaml
  OS::TripleO::Network::Ports::ControlPlaneVipPort: deployed-server/deployed-neutron-port.yaml
  OS::TripleO::Network::Ports::NetVipMap: network/ports/net_vip_map_external.yaml
  OS::TripleO::Network::Ports::RedisVipPort: network/ports/noop.yaml
  OS::TripleO::Network::Ports::OVNDBsVipPort: network/ports/noop.yaml
  OS::TripleO::Network::Ports::ExternalVipPort: network/ports/noop.yaml
  OS::TripleO::Network::Ports::InternalApiVipPort: network/ports/noop.yaml
  OS::TripleO::Network::Ports::StorageVipPort: network/ports/noop.yaml
  OS::TripleO::Network::Ports::StorageMgmtVipPort: network/ports/noop.yaml
  # for OSP16.2 set OVNMacAddressNetwork and OVNMacAddressPort to None, see https://github.com/openstack-k8s-operators/osp-director-operator/issues/254
  OS::TripleO::OVNMacAddressNetwork: OS::Heat::None
  OS::TripleO::OVNMacAddressPort: OS::Heat::None
{{- range $roleid, $role := .RolesMap }}
{{- if and $role.IsVMType $role.IsTripleoRole }}
  OS::TripleO::{{ $role.Name }}::Net::SoftwareConfig: {{ $role.NameLower }}-nic-template.yaml
{{- end }}
{{- if not $role.IsControlPlane }}
{{- range $netid, $net := $role.Networks }}
{{- if not $net.IsControlPlane }}
  OS::TripleO::{{ $role.Name }}::Ports::{{ $net.Name }}Port: network/ports/{{ $net.NameLower }}_from_pool.yaml
{{- end }}
{{- end }}
{{- end }}
{{- end }}

# Parameter Defaults
parameter_defaults:
  StackAction: CREATE
  DeployIdentifier: OSP_DIRECTOR_OPERATOR_DEPLOY_IDENTIFIER
  SoftwareConfigTransport: POLL_SERVER_HEAT
  RootStackName: overcloud
  ManageNetworks: False
  MistralDockerGroup: false
  ContainerCli: podman
  NeutronPublicInterface: nic3
  #
  # DeployedServerPortMap
  DeployedServerPortMap:
{{- range $roleid, $role := .RolesMap }}
{{- range $nodeid, $node := $role.Nodes }}
{{- range $netname, $ip := $node.IPaddr }}
{{- if $ip.Network.IsControlPlane }}
{{- if $node.VIP }}
    control_virtual_ip:
{{- else }}
    {{ $node.Hostname }}-{{ $ip.Network.ID }}:
{{- end }}
      fixed_ips:
        - ip_address: {{ $ip.IPaddr }}
      subnets:
        - cidr: {{ $ip.Network.Cidr }}
          {{- range $_, $net := $.NetworksMap }}
          {{- range $subnetname, $subnet := $net.Subnets }}
          {{- if eq $subnetname $ip.Network.ID }}
          gateway_ip: {{ $subnet.IPv4.Gateway }}
          host_routes: {{ if eq (len $subnet.IPv4.Routes) 0 }}[]{{ else }}
          {{- range $_, $route := $subnet.IPv4.Routes }}
            - destination: '{{ $route.Destination }}'
              nexthop: '{{ $route.Nexthop }}'
          {{- end }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{- end }}
      network:
        tags:
          - {{ $ip.Network.Cidr }}

{{- end }}
{{- end }}
{{- end }}
{{- end }}

  #
  # <Role>SubnetName
{{- range $roleid, $role := .RolesMap }}
  {{- if not $role.IsControlPlane }}
  {{- range $netid, $net := $role.Networks }}
  {{- if $net.IsControlPlane }}
  {{ $role.Name }}ControlPlaneSubnet: "{{ $netid }}"
  {{- end }}
  {{- end }}
  {{- end }}
{{- end }}

  #
  #<NETNAME>NetworkVip
{{- range $roleid, $role := .RolesMap }}
{{- range $nodeid, $node := $role.Nodes }}
{{- range $netname, $ip := $node.IPaddr }}
{{- if $node.VIP }}
{{- if $ip.Network.IsControlPlane }}
  ControlPlaneIP: {{ $ip.IPaddr }}
{{- else }}
  {{ with (index $.NetworksMap $netname) }}{{ .Name }}{{ end }}NetworkVip: {{ $ip.IPaddr }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

  #
  # HostnameFormat and RoleCount
{{- range $roleid, $role := .RolesMap }}
{{- if not $role.IsControlPlane }}
  {{ $role.Name }}HostnameFormat: "{{ $role.NameLower }}-%index%"
  {{- $roleCount := len $role.Nodes }}
  {{ $role.Name }}Count: {{ $roleCount }}
{{- end }}
{{- end }}
  #
  # HostnameMap
  HostnameMap:
{{- range $roleid, $role := .RolesMap }}
{{- range $nodeid, $node := $role.Nodes }}
{{- if not $node.VIP }}
    {{ $role.NameLower }}-{{ $node.Index }}: {{ $node.Hostname }}
{{- end }}
{{- end }}
{{- end }}
  #
  # ips-from-pool
{{- range $roleid, $role := .RolesMap }}
{{- if not $role.IsControlPlane }}
  {{ $role.Name }}IPs:
{{- range $netid, $net := $role.Networks }}
{{- if not $net.IsControlPlane }}
      {{ $net.NameLower }}:
{{- range $nodeid, $node := $role.Nodes }}
{{- range $netname, $ip := $node.IPaddr }}
{{- if eq $ip.Network.Cidr $net.Cidr }}
        - {{ $ip.IPaddr }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
