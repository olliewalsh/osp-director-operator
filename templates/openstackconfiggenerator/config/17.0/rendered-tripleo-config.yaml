{{- /* golang template - https://pkg.go.dev/text/template */ -}}
# Resource Registry
resource_registry:
  OS::TripleO::Server: deployed-server/deployed-server.yaml

# Parameter Defaults
parameter_defaults:
  StackAction: CREATE
  DeployIdentifier: OSP_DIRECTOR_OPERATOR_DEPLOY_IDENTIFIER
  SoftwareConfigTransport: POLL_SERVER_HEAT
  RootStackName: overcloud
  NeutronPublicInterface: nic3
{{- /* HostnameFormat and RoleCount */ -}}
{{- range $roleid, $role := .RolesMap }}
{{- if not $role.IsControlPlane }}
  {{ $role.Name }}HostnameFormat: "{{ $role.NameLower }}-%index%"
  {{- $roleCount := len $role.Nodes }}
  {{ $role.Name }}Count: {{ $roleCount }}
{{- end }}
{{- end }}
  #
  # VM NIC templates
{{- range $roleid, $role := .RolesMap }}
{{- if and $role.IsVMType $role.IsTripleoRole }}
  {{ $role.Name }}NetworkConfigTemplate: '{{ $role.NameLower }}-nic-template.j2'
{{- end }}
{{- end }}
  #
  # HostnameMap
  HostnameMap:
{{- range $roleid, $role := .RolesMap }}
{{- if not $role.IsControlPlane }}
{{- range $nodeid, $node := $role.Nodes }}
    {{ $role.NameLower }}-{{ $node.Index }}: {{ $node.HostnameOverride }}
{{- end }}
{{- end }}
{{- end }}
  # https://docs.openstack.org/project-deploy-guide/tripleo-docs/latest/features/custom_networks.html
  # https://docs.openstack.org/project-deploy-guide/tripleo-docs/latest/features/deployed_server.html
  # https://specs.openstack.org/openstack/tripleo-specs/specs/wallaby/triplo-network-data-v2-node-ports.html
  DeployedServerPortMap:
{{- range $roleid, $role := .RolesMap }}
{{- range $nodeid, $node := $role.Nodes }}
{{- range $netname, $ip := $node.IPaddr }}
{{- if and (not $node.VIP) (eq $netname "ctlplane") }}
    {{ $node.HostnameOverride }}-{{ $netname }}:
      fixed_ips:
        - ip_address: {{ $ip.IPaddr }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
  #
  # NodePortMap
  NodePortMap:
{{- range $roleid, $role := .RolesMap }}
{{- if not $role.IsControlPlane }}
{{- range $nodeid, $node := $role.Nodes }}
    {{ $node.HostnameOverride }}:
{{- range $netname, $ip := $node.IPaddr }}
      {{ $ip.Network.NameLower }}:
        ip_address: {{ $ip.IPaddr }}
        ip_address_uri: '{{ $ip.IPAddrURI }}'
        ip_subnet: {{ $ip.IPAddrSubnet }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
  #
  # VipPortMap
{{- range $roleid, $role := .RolesMap }}
{{- if $role.IsControlPlane }}
{{- range $nodeid, $node := $role.Nodes }}
{{- if $node.VIP }}
  VipPortMap:
{{- range $netname, $ip := $node.IPaddr }}
{{- if not $ip.Network.IsControlPlane }}
    {{ $netname }}:
      ip_address: {{ $ip.IPaddr }}
      ip_address_uri: '{{ $ip.IPAddrURI }}'
      ip_subnet: {{ $ip.IPAddrSubnet }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
  #
  # ControlPlaneVipData
  ControlPlaneVipData:
{{- range $roleid, $role := .RolesMap }}
{{- if $role.IsControlPlane }}
{{- range $nodeid, $node := $role.Nodes }}
{{- range $netname, $ip := $node.IPaddr }}
{{- if and ($node.VIP) ($ip.Network.IsControlPlane) }}
    fixed_ips:
    - ip_address: {{ $ip.IPaddr }}
    name: control_virtual_ip
    network:
      tags:
      - {{ $ip.Network.Cidr }}
    subnets:
    - ip_version: 4
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
  #
  # ControlPlaneSubnet
{{- range $roleid, $role := .RolesMap }}
{{- if $role.IsControlPlane }}
{{- range $nodeid, $node := $role.Nodes }}
{{- range $netname, $ip := $node.IPaddr }}
{{- if and ($node.VIP) ($ip.Network.IsControlPlane) }}
  ControlPlaneSubnet: {{ $ip.Network.ID }}-subnet
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
  #
  # Set VIP's for redis and OVN
{{- range $roleid, $role := .RolesMap }}
{{- range $nodeid, $node := $role.Nodes }}
{{- range $netname, $ip := $node.IPaddr }}
{{- if $node.ServiceVIP }}
  {{ $role.Name }}VirtualFixedIPs:
    - ip_address: {{ $ip.IPaddr }}
      use_neutron: false
{{- end }}
{{- end }}
{{- end }}
{{- end }}
  #
  # OVNStaticBridgeMacMappings
  OVNStaticBridgeMacMappings:
{{- range $roleid, $role := .RolesMap }}
{{- range $nodeid, $node := $role.Nodes }}
{{- if and (not $node.VIP) (not $node.ServiceVIP) }}
    {{ $node.Hostname }}:
{{- range $netname, $mac := $node.OVNStaticBridgeMappings }}
      {{ $netname }}: {{ $mac }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
  #
  # CtlplaneNetworkAttributes
  CtlplaneNetworkAttributes:
    {{- range $netname, $net := .NetworksMap }}
    {{- if $net.IsControlPlane }}
    network:
      dns_domain: {{ $net.DomainName }}.
      mtu: {{ $net.MTU }}
      name: {{ $net.NameLower }}
      tags:
      {{- range $subnetname, $subnet := $net.Subnets }}
      - {{ $subnet.IPv4.Cidr }}
      {{- end }}
    {{- /* subnets start */}}
    subnets:
    {{- range $subnetname, $subnet := $net.Subnets }}
      {{ $subnetname }}-subnet:
        cidr: '{{ $subnet.IPv4.Cidr }}'
        dns_nameservers: {{ if eq (len $net.DNSServers) 0 }}[]{{ else }}
          {{- range $idx, $dnsServer := $net.DNSServers }}
          - {{ $dnsServer }}
          {{- end }}
          {{- end }}
        gateway_ip: {{ $subnet.IPv4.Gateway }}
        host_routes: {{ if eq (len $subnet.IPv4.Routes) 0 }}[]{{ else }}
          {{- range $netname, $route := $subnet.IPv4.Routes }}
          - destination: '{{ $route.Destination }}'
            nexthop: '{{ $route.Nexthop }}'
          {{- end }}
          {{- end }}
        ip_version: 4
        name: {{ $subnetname }}-subnet
    {{- end }}
    {{- end }}
    {{- end }}
  #
  # <role>ControlPlaneSubnet
{{- range $roleid, $role := .RolesMap }}
{{- if not $role.IsControlPlane }}
{{- $done := 0 }}
{{- range $nodeid, $node := $role.Nodes }}
{{- range $netname, $ip := $node.IPaddr }}
{{- if and (eq $done 0) $ip.Network.IsControlPlane }}
  {{ $role.Name }}ControlPlaneSubnet: {{ $ip.Network.ID }}-subnet
  {{- $done = 1 }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
